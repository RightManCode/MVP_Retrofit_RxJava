package com.wzgiceman.rxretrofitlibrary.retrofit_rx.downlaod.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_task_info".
*/
public class TaskInfoDao extends AbstractDao<TaskInfo, Long> {

    public static final String TABLENAME = "tb_task_info";

    /**
     * Properties of entity TaskInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property FilePath = new Property(2, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property Lenght = new Property(4, int.class, "lenght", false, "LENGHT");
        public final static Property Finished = new Property(5, int.class, "finished", false, "FINISHED");
        public final static Property StateInte = new Property(6, int.class, "stateInte", false, "STATE_INTE");
    }


    public TaskInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TaskInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_task_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"FILE_PATH\" TEXT," + // 2: filePath
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"LENGHT\" INTEGER NOT NULL ," + // 4: lenght
                "\"FINISHED\" INTEGER NOT NULL ," + // 5: finished
                "\"STATE_INTE\" INTEGER NOT NULL );"); // 6: stateInte
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_task_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getLenght());
        stmt.bindLong(6, entity.getFinished());
        stmt.bindLong(7, entity.getStateInte());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getLenght());
        stmt.bindLong(6, entity.getFinished());
        stmt.bindLong(7, entity.getStateInte());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskInfo readEntity(Cursor cursor, int offset) {
        TaskInfo entity = new TaskInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.getInt(offset + 4), // lenght
            cursor.getInt(offset + 5), // finished
            cursor.getInt(offset + 6) // stateInte
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLenght(cursor.getInt(offset + 4));
        entity.setFinished(cursor.getInt(offset + 5));
        entity.setStateInte(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
